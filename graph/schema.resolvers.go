package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/hagios2/simple-app/entity"
	"github.com/hagios2/simple-app/graph/model"
	"github.com/hagios2/simple-app/service"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// AddVideo is the resolver for the addVideo field.
func (r *mutationResolver) AddVideo(ctx context.Context, input model.VideoInput) (*model.Video, error) {
	var videoService service.VideoService
	video := entity.Video{
		Title:       input.Title,
		Description: input.Title,
		URL:         input.URL,
		Author: entity.Person{
			FirstName: input.Author.Firstname,
			LastName:  input.Author.Lastname,
			Age:       input.Author.Age,
			Email:     input.Author.Email,
		},
	}
	newVideo := videoService.SaveGQL(video)

	return newVideo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Videos is the resolver for the videos field.
func (r *queryResolver) Videos(ctx context.Context) ([]*model.Video, error) {
	panic(fmt.Errorf("not implemented: Videos - videos"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
